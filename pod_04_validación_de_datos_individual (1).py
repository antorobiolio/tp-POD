# -*- coding: utf-8 -*-
"""POD - 04/Validación de datos/Individual.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Voknk8oCBALX5PkSBQNzP46HJQY3N_Ez

*   **Año:** [2024]
*   **Alumno/a:** [Antonella Robiolio]
*   **Legajo:** [42904775]

# Pydantic
Pydantic es una libreria rapida y extensible que nos permite validar datos usando tipos de datos de Python.

Primero, importe `pydantic`.
"""

import pydantic as pyd

"""Supongamos que tenemos una lista de clientes (llamemoslo en el codigo `Client`). Los clientes tienen dos campos: DNI (un entero) y nacionalidad (un `string`). Cree el modelo base de `Client` (en forma de clases de Python)."""

class Client(pyd.BaseModel):
    DNI: int
    nacionalidad: str

"""Cree a un usuario con documento 39.755.010 y nacionalidad 'Argentina'. Muestre todos sus campos."""

usuario = Client(DNI=39755010, nacionalidad='Argentina')
print(usuario)

"""Intente crear al usuario con un documento en forma de `string`. Deberia fallar..."""

try:
    usuario = Client(DNI='39755010', nacionalidad='Argentina')
except Exception as e:
    print("Se produjo un error:")
    print(str(e))

"""Hemos detectado que ciertos clientes tienen nacionalidades que no existen. Ademas, hay numeros de documento negativos y se tiene que poder agregar la fecha de registro de los clientes (que no pueden ser del futuro). Cambiar la definicion del cliente para que estas cosas no ocurran. Despues de la siguiente celda, cree otras 3 mas probando un caso donde deberia funcionar y otros dos en los que no."""

from pydantic import BaseModel, validator, ValidationError
from datetime import datetime


valid_nacionalidades = ["Argentina", "Brasil", "Chile", "Colombia", "Perú"]

class Client(BaseModel):
    DNI: int
    nacionalidad: str
    fecha_registro: datetime

    @validator('nacionalidad')
    def validar_nacionalidad(cls, v):
        if v not in valid_nacionalidades:
            raise ValueError(f"La nacionalidad '{v}' no es válida.")
        return v

    @validator('DNI')
    def validar_dni(cls, v):
        if v <= 0:
            raise ValueError(f"El DNI debe ser un número positivo. Valor recibido: {v}")
        return v

    @validator('fecha_registro')
    def validar_fecha_registro(cls, v):
        if v > datetime.now():
            raise ValueError(f"La fecha de registro no puede ser del futuro. Fecha recibida: {v}")
        return v

#Caso valido
try:
    cliente_valido = Client(DNI=39755010, nacionalidad="Argentina", fecha_registro=datetime(2020, 5, 15))
    print("Cliente válido:", cliente_valido)
except ValidationError as e:
    print("Error de validación:", e)

#Caso no válido (DNI negativo)

try:
    cliente_dni_negativo = Client(DNI=-39755010, nacionalidad="Argentina", fecha_registro=datetime(2020, 5, 15))
    print("Cliente con DNI negativo:", cliente_dni_negativo)
except ValidationError as e:
    print("Error de validación:", e)

#Caso no válido (Nacionalidad inválida)
try:
    cliente_nacionalidad_invalida = Client(DNI=39755010, nacionalidad="Italia", fecha_registro=datetime(2020, 5, 15))
    print("Cliente con nacionalidad inválida:", cliente_nacionalidad_invalida)
except ValidationError as e:
    print("Error de validación:", e)

"""# Pandera
Hacer lo que se pidio en la ultima celda anterior, pero con Pandera.
"""

pip install --upgrade pandera

import pandera as pa
from pandera import Column
from datetime import datetime
import pandas as pd

valid_nacionalidades = ["Argentina", "Brasil", "Chile", "Colombia", "Perú"]


class ClientSchema(pa.DataFrameSchema):
    DNI = Column(pa.Int, checks=pa.Check.ge(1), nullable=False)
    nacionalidad = Column(pa.String, checks=pa.Check.isin(valid_nacionalidades), nullable=False)
    fecha_registro = Column(pa.DateTime, checks=pa.Check.le(datetime.now()), nullable=False)

client_schema = ClientSchema()

# 1. Caso válido
try:
    df_valido = pd.DataFrame({"DNI": [39755010], "nacionalidad": ["Argentina"], "fecha_registro": [datetime(2020, 5, 15)]})
    cliente_valido = client_schema(df_valido)
    print("Cliente válido:", cliente_valido)
except pa.errors.SchemaError as e:
    print("Error de validación:", e)

# 2. Caso no válido (DNI negativo)
try:
    df_dni_negativo = pd.DataFrame({"DNI": [-39755010], "nacionalidad": ["Argentina"], "fecha_registro": [datetime(2020, 5, 15)]})
    cliente_dni_negativo = client_schema(df_dni_negativo)
    print("Cliente con DNI negativo:", cliente_dni_negativo)
except pa.errors.SchemaError as e:
    print("Error de validación:", e)

# 3. Caso no válido (Nacionalidad inválida)
try:
    df_nacionalidad_invalida = pd.DataFrame({"DNI": [39755010], "nacionalidad": ["Italia"], "fecha_registro": [datetime(2020, 5, 15)]})
    cliente_nacionalidad_invalida = client_schema(df_nacionalidad_invalida)
    print("Cliente con nacionalidad inválida:", cliente_nacionalidad_invalida)
except pa.errors.SchemaError as e:
    print("Error de validación:", e)