# -*- coding: utf-8 -*-
"""POD - 03/Pandas/Individual - ANTONELLA ROBIOLIO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tcdyTbinpNH8_dBTw2sKAGW8NsFZV9IX

*   **Año:** [2024]
*   **Alumno/a:** [ANTONELLA ROBIOLIO]
*   **Legajo:** [42904775]

# Pandas
A continuación, cada celda va a pedir algo distinto. Por favor, realizarlo con la menor cantidad de lineas posibles y con NumPy.

Importar `pandas` con el alias `pd` e imprimir la versión instalada.
"""

import pandas as pd

"""Crear la siguiente tabla como un dataframe de Pandas donde cada linea represente un diccionario.

| _Index_ | **nombre**       | **edad** | **dni**  |
|---------|------------------|----------|----------|
| 9       | Brown, James     | 43       | 30123444 |
| 3       | Hamkel, Louis V. | 29       | 44555666 |
| 7       | Baptista, Carlos | 28       | 43120111 |
"""

data = [
    {"Index": 9, "nombre": "Brown, James", "edad": 43, "dni": 30123444},
    {"Index": 3, "nombre": "Hamkel, Louis V.", "edad": 29, "dni": 44555666},
    {"Index": 7, "nombre": "Baptista, Carlos", "edad": 28, "dni": 43120111}
]

df = pd.DataFrame(data).set_index("Index")
df

"""Crear la siguiente tabla como un dataframe de Pandas donde todas las lineas esten dentro de un solo diccionario.

| _Index_ | **nombre**       | **edad** | **dni**  |
|---------|------------------|----------|----------|
| 9       | Brown, James     | 43       | 30123444 |
| 3       | Hamkel, Louis V. | 29       | 44555666 |
| 7       | Baptista, Carlos | 28       | 43120111 |
"""

data = {
    "Index": [9, 3, 7],
    "nombre": ["Brown, James", "Hamkel, Louis V.", "Baptista, Carlos"],
    "edad": [43, 29, 28],
    "dni": [30123444, 44555666, 43120111]
}

df = pd.DataFrame(data).set_index("Index")
df

"""Crear la siguiente tabla como un dataframe de Pandas donde se usen unicamente listas.

| _Index_ | **nombre**       | **edad** | **dni**  |
|---------|------------------|----------|----------|
| 9       | Brown, James     | 43       | 30123444 |
| 3       | Hamkel, Louis V. | 29       | 44555666 |
| 7       | Baptista, Carlos | 28       | 43120111 |
"""

indices = [9, 3, 7]
nombres = ["Brown, James", "Hamkel, Louis V.", "Baptista, Carlos"]
edades = [43, 29, 28]
dnis = [30123444, 44555666, 43120111]

df = pd.DataFrame({
    "Index": indices,
    "nombre": nombres,
    "edad": edades,
    "dni": dnis
}).set_index("Index")

df

"""Crear la siguiente tabla como un dataframe de Pandas donde se usen unicamente `Series`.

| _Index_ | **nombre**       | **edad** | **dni**  |
|---------|------------------|----------|----------|
| 9       | Brown, James     | 43       | 30123444 |
| 3       | Hamkel, Louis V. | 29       | 44555666 |
| 7       | Baptista, Carlos | 28       | 43120111 |
"""

indices = pd.Series([9, 3, 7], name="Index")
nombres = pd.Series(["Brown, James", "Hamkel, Louis V.", "Baptista, Carlos"], name="nombre")
edades = pd.Series([43, 29, 28], name="edad")
dnis = pd.Series([30123444, 44555666, 43120111], name="dni")

df = pd.DataFrame({
    "Index": indices,
    "nombre": nombres,
    "edad": edades,
    "dni": dnis
}).set_index("Index")

df

"""Reutilice cualquiera de los dataframe hechos anteriormente pero agregue la columna `fecha` con el tipo de dato relacionado a fechas.

| _Index_ | **nombre**       | **edad** | **dni**  | **fecha**  |
|---------|------------------|----------|----------|------------|
| 9       | Brown, James     | 43       | 30123444 | 12/08/1981 |
| 3       | Hamkel, Louis V. | 29       | 44555666 | 10/04/1995 |
| 7       | Baptista, Carlos | 28       | 43120111 | 28/05/1996 |
"""

data = [
    {"Index": 9, "nombre": "Brown, James", "edad": 43, "dni": 30123444},
    {"Index": 3, "nombre": "Hamkel, Louis V.", "edad": 29, "dni": 44555666},
    {"Index": 7, "nombre": "Baptista, Carlos", "edad": 28, "dni": 43120111}
]

df = pd.DataFrame(data).set_index("Index")

# Agregar la columna de fechas
df["fecha"] = ["12/08/1981", "10/04/1995", "28/05/1996"]

print(df)

"""Ejecute la siguiente celda. Se va a descargar un archivo llamado `u.user`."""

!wget https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user

"""Lea el archivo con pandas y muestre las primeras 5 filas."""

df_users = pd.read_csv('u.user', delimiter='|')
print(df_users.head())

"""Utilice la columna `user_id` como indice y saque dicha columna del dataframe


"""

df_users.set_index('user_id', inplace=True)
print(df_users.head())

"""¿Cuantas categorias de trabajos hay?"""

num_categorias_trabajos = df_users['occupation'].nunique()

print("Número de categorías de trabajos:", num_categorias_trabajos)

""" Reporte el porcentaje de personas que tiene cada ocupación."""

porcentaje_ocupacion = (df_users['occupation'].value_counts(normalize=True) * 100).round(2)

print("Porcentaje de personas por ocupación:")
print(porcentaje_ocupacion)

"""Reporte el promedio de edad de los estudiantes usando indexeo booleano."""

edad_promedio_estudiantes = df_users[df_users['occupation'] == 'student']['age'].mean()

print("Promedio de edad de los estudiantes:", round(edad_promedio_estudiantes, 2))

"""Mostrar, con una sola linea y sin importar `matplotlib`, un histograma de las edades de las personas que son administradores."""

df_users[df_users['occupation'] == 'administrator']['age'].hist()

"""Reemplace, sin usar `for`, en la columna `gender` `F` por `female` y `M` por `male`."""

df_users['gender'] = df_users['gender'].replace({'F': 'female', 'M': 'male'})

print(df_users.head())

"""# Yahoo! Finance

Vamos a analizar acciones. La siguiente linea accede a Yahoo Finance y devuelve un DataFrame con los valores de la acción cada dia desde el 1980.
"""

import yfinance as yf
dataframe = yf.download('AAPL', start="1980-01-01", end="2030-01-01")

"""¿Cual es el registro mas viejo? Imprimirlo."""

registro_mas_viejo = dataframe.head(1)

print("Registro más viejo:")
print(registro_mas_viejo)

"""Cree la columna `Average` tal que

$$Average =  \frac{High-Low}{2}$$

y muestre con un histograma dicha columna.
"""

dataframe['Average'] = (dataframe['High'] - dataframe['Low']) / 2
dataframe['Average'].hist()

"""Con `matplotlib`, muestre como `Average` fue evolucionando *al final de cada año*."""

import matplotlib.pyplot as plt
dataframe['Year'] = dataframe.index.year
average_anual = dataframe.groupby('Year')['Average'].last()
plt.plot(average_anual.index, average_anual.values)
plt.xlabel('Año')
plt.ylabel('Average')
plt.title('Evolución de Average al final de cada año')
plt.grid(True)
plt.show()

"""Muestre con un gráfico de barras, como el volumen fue cambiando *año a año*."""

import matplotlib.pyplot as plt

dataframe['Year'] = dataframe.index.year
volumen_anual = dataframe.groupby('Year')['Volume'].sum()
plt.figure(figsize=(10, 6))
plt.bar(volumen_anual.index, volumen_anual.values.ravel())
plt.xlabel('Año')
plt.ylabel('Volumen Total')
plt.title('Cambio del Volumen Año a Año')
plt.xticks(rotation=45)
plt.show()

"""# Cancelaciones y Delays de vuelos del 2015

Creese una cuenta en Kaggle e importe los archivos del dataset del siguiente link: https://www.kaggle.com/datasets/usdot/flight-delays. Cree los dataframes `airlines`, `airports`, y `flights` apartir de esos archivos.
"""

import kagglehub
import pandas as pd
path = kagglehub.dataset_download("usdot/flight-delays")

airlines_file = f"{path}/airlines.csv"
airports_file = f"{path}/airports.csv"
flights_file = f"{path}/flights.csv"

airlines = pd.read_csv(airlines_file)
airports = pd.read_csv(airports_file)
flights = pd.read_csv(flights_file)


print("Airlines DataFrame:")
print(airlines.head())

print("\nAirports DataFrame:")
print(airports.head())

print("\nFlights DataFrame:")
print(flights.head())

"""Combine (*join*) las tablas `airlines`, `airports`, y `flights` en una sola tabla."""

flights_combined = flights.merge(airlines, how='left', left_on='AIRLINE', right_on='IATA_CODE')
flights_combined = flights_combined.merge(airports, how='left', left_on='ORIGIN_AIRPORT', right_on='IATA_CODE')
print("Tabla combinada:")
print(flights_combined.head())

"""¿Cuantos vuelos fueron al aeropuerto JFK?"""

vuelos_a_JFK = flights[flights['DESTINATION_AIRPORT'] == 'JFK'].shape[0]

print(f"Número de vuelos al aeropuerto JFK: {vuelos_a_JFK}")

"""¿Cuantos vuelos hizo la aerolinea AA?"""

vuelos_AA = flights[flights['AIRLINE'] == 'AA'].shape[0]

print(f"Número de vuelos realizados por la aerolínea AA: {vuelos_AA}")

"""¿Que aerolineas (las primeras 5) tuvo la menor cantidad de vuelos con atrasos? Imprimirlas."""

vuelos_con_retraso = flights[flights['DEPARTURE_DELAY'] > 0]
retrasos_por_aerolinea = vuelos_con_retraso['AIRLINE'].value_counts()
menor_retraso_aerolineas = retrasos_por_aerolinea.nsmallest(5)

print("Las 5 aerolíneas con la menor cantidad de vuelos con retrasos:")
print(menor_retraso_aerolineas)

"""¿Que aerolineas (las primeras 5) tuvo la mayor cantidad de vuelos con atrasos? Imprimirlas."""

vuelos_con_retraso = flights[flights['DEPARTURE_DELAY'] > 0]
retrasos_por_aerolinea = vuelos_con_retraso['AIRLINE'].value_counts()
mayor_retraso_aerolineas = retrasos_por_aerolinea.head(5)

print("Las 5 aerolíneas con la mayor cantidad de vuelos con retrasos:")
print(mayor_retraso_aerolineas)

"""Haga un resumen de las razones por la cual los vuelos se atrasan."""

retraso_columnas = ['WEATHER_DELAY', 'SECURITY_DELAY', 'LATE_AIRCRAFT_DELAY']
razones_retraso = flights[retraso_columnas].sum()

print("Resumen de las razones por las cuales los vuelos se atrasan:")
print(razones_retraso)

"""Compruebe si hay columnas con celdas vacias."""

columnas_con_celdas_vacias = flights.isnull().sum()
print("Columnas con celdas vacías:")
print(columnas_con_celdas_vacias[columnas_con_celdas_vacias > 0])

"""Haga una imputación de datos COMPLETA del dataframe. Pueden escojer cualquier estrategia y no necesariamente todas las columnas deben seguir la misma estrategia."""

import pandas as pd
# Imputación de columnas numéricas
for column in flights.select_dtypes(include='number').columns:
    flights[column] = flights[column].fillna(flights[column].median())

# Imputación de columnas categóricas
for column in flights.select_dtypes(include='object').columns:
    flights[column] = flights[column].fillna(flights[column].mode()[0])

# Imputación específica para las columnas de retraso
retraso_columnas = ['WEATHER_DELAY', 'SECURITY_DELAY', 'LATE_AIRCRAFT_DELAY']
for column in retraso_columnas:
    if column in flights.columns:
        flights[column] = flights[column].fillna(0)

print("Imputación de datos completa realizada.")